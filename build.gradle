import java.text.SimpleDateFormat

/*plugins {
	id 'org.springframework.boot' version '2.4.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}*/

buildscript {
	ext {
		springBootVersion = '2.4.4'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2")
	}
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco' 
apply plugin: 'maven'



bootJar {
    baseName = 'mvnEAPPAdmin'
    version =  '0.1.0'
launchScript()
}



springBoot {
       buildInfo {
              properties {
                     additional = [
                                  by: System.properties['user.name'],
                                  operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                                  continuousIntegration: System.getenv('CI') ? true: false,
                                  machine: InetAddress.localHost.hostName,
                                  // Override buildInfo property time
                                  time: buildTime(),
                                  buildNumber : System.getenv ()["bamboo_buildNumber"]  ? System.getenv ()["bamboo_buildNumber"]  : "local" ,
                                  name: 'mvnEAPPAdmin'
                     ]
              }
       }
}


def buildTime() {
       final dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ")
       dateFormat.timeZone = TimeZone.getTimeZone('GMT')
       dateFormat.format(new Date())
}


sonarqube {
       properties{
                     property "sonar.java.coveragePlugin", "jacoco"
                     property "sonar.java.binaries", "build/classes/"
                     property "sonar.jacoco.reportPaths", "build/jacoco/test_sonar.exec"
                     property "sonar.junit.reportsPath", "build/test-results/test/"
                     
       }
}


sourceCompatibility = '11'

repositories {
	mavenCentral()
}

test {
  ignoreFailures = true
}


dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter-web'
	 implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'	
	
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation group: 'com.hazelcast', name: 'hazelcast-all', version: '4.0.2'
	
	//spring security oauth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'	
	implementation 'org.springframework.security:spring-security-oauth2-jose'
	
	// https://mvnrepository.com/artifact/org.modelmapper/modelmapper
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.9'
	
	// https://mvnrepository.com/artifact/org.projectlombok/lombok
	compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
	
	// https://mvnrepository.com/artifact/org.projectlombok/lombok-mapstruct-binding
	implementation group: 'org.projectlombok', name: 'lombok-mapstruct-binding', version: '0.2.0'
	
	
	
	
	
	//actuator
	compile('org.springframework.boot:spring-boot-starter-actuator:2.1.3.RELEASE')
	
		
	//Swagger
		compile("io.springfox:springfox-swagger2:2.9.2") {
	    	exclude module: 'mapstruct' // necessary in my case to not end up with multiple mapstruct versions
		}
		compile "io.springfox:springfox-bean-validators:2.9.2"
		compile "io.springfox:springfox-swagger-ui:2.9.2"
	//Swagger
	
	//local jars like db2 jar
	compile fileTree(include: ['*.jar'], dir: 'libs')
	
	
	compile group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.1'
	compile(group: 'org.projectlombok', name: 'lombok', version: '1.16.16')
	compile group: 'org.owasp.esapi', name: 'esapi', version: '2.2.0.0'
	
	//rsql
	compile('cz.jirutka.rsql:rsql-parser:2.1.0')
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	
}

test {
	useJUnitPlatform()
}
